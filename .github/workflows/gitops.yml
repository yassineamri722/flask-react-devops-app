name: CI/CD Pipeline - Sonar → Build → Scan → Push → GitOps

on:
  push:
    branches: [ master, dev ]
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  # ---------------- SonarCloud Analysis ----------------
  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Sonar packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ---------------- Build, Scan & Push Docker ----------------
  build-scan:
    name: Build, Scan & Push (${{ matrix.service }})
    runs-on: ubuntu-24.04
    needs: sonar
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:buildcache,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.sha }}"
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  # ---------------- Update Helm values.yaml & GitOps ----------------
  update-helm:
    name: Update Helm values.yaml & Push
    runs-on: ubuntu-24.04
    needs: build-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq

      - name: Update Helm values.yaml with new image tags
        run: |
          FILE=charts/flask-react-app/values.yaml

          # Update backend image
          yq -i -y '
            .backend.image.repository = "'${{ env.DOCKERHUB_USERNAME }}'/backend" |
            .backend.image.tag = "'${{ github.sha }}'" |
            .backend.image.pullPolicy = "Always"
          ' $FILE

          # Update frontend image
          yq -i -y '
            .frontend.image.repository = "'${{ env.DOCKERHUB_USERNAME }}'/frontend" |
            .frontend.image.tag = "'${{ github.sha }}'" |
            .frontend.image.pullPolicy = "Always"
          ' $FILE


      - name: Commit and push Helm changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add charts/flask-react-app/values.yaml

          # commit only if there are changes
          git diff --cached --quiet || git commit -m "Update image tags to ${{ github.sha }}"

          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          git push origin HEAD:${{ github.ref_name }} || echo "Push skipped (no changes)"
